"""[IMP] enforce User email uniqueness

Revision ID: 9018fe92bbfe
Revises: a248f92e07e3
Create Date: 2024-06-26 19:43:41.573325

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "9018fe92bbfe"
down_revision: Union[str, None] = "a248f92e07e3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("bookings_room_id_fkey", "bookings", type_="foreignkey")
    op.drop_constraint("bookings_user_id_fkey", "bookings", type_="foreignkey")
    op.create_foreign_key(
        None, "bookings", "rooms", ["room_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "bookings", "users", ["user_id"], ["id"], ondelete="SET NULL"
    )
    op.alter_column("rooms", "description", existing_type=sa.VARCHAR(), nullable=True)
    op.create_unique_constraint(None, "users", ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="unique")
    op.alter_column("rooms", "description", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_constraint(None, "bookings", type_="foreignkey")
    op.drop_constraint(None, "bookings", type_="foreignkey")
    op.create_foreign_key(
        "bookings_user_id_fkey", "bookings", "users", ["user_id"], ["id"]
    )
    op.create_foreign_key(
        "bookings_room_id_fkey", "bookings", "rooms", ["room_id"], ["id"]
    )
    # ### end Alembic commands ###
